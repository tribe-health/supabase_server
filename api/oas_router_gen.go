// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

func (s *Server) notAllowed(w http.ResponseWriter, r *http.Request, allowed string) {
	s.cfg.MethodNotAllowed(w, r, allowed)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetOrganizationsRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateOrganizationRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
			case 'p': // Prefix: "projects"
				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetProjectsRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateProjectRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ref"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "functions"
							if l := len("functions"); len(elem) >= l && elem[0:l] == "functions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetFunctionsRequest([1]string{
										args[0],
									}, w, r)
								case "POST":
									s.handleCreateFunctionRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "function_slug"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDeleteFunctionRequest([2]string{
											args[0],
											args[1],
										}, w, r)
									case "GET":
										s.handleGetFunctionRequest([2]string{
											args[0],
											args[1],
										}, w, r)
									case "PATCH":
										s.handleUpdateFunctionRequest([2]string{
											args[0],
											args[1],
										}, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PATCH")
									}

									return
								}
							}
						case 'p': // Prefix: "pgsodium"
							if l := len("pgsodium"); len(elem) >= l && elem[0:l] == "pgsodium" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetConfigRequest([1]string{
										args[0],
									}, w, r)
								case "PUT":
									s.handleUpdateConfigRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}
						case 's': // Prefix: "secrets"
							if l := len("secrets"); len(elem) >= l && elem[0:l] == "secrets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteSecretsRequest([1]string{
										args[0],
									}, w, r)
								case "GET":
									s.handleGetSecretsRequest([1]string{
										args[0],
									}, w, r)
								case "POST":
									s.handleCreateSecretsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,POST")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [2]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "organizations"
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetOrganizations
						r.name = "GetOrganizations"
						r.operationID = "getOrganizations"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: CreateOrganization
						r.name = "CreateOrganization"
						r.operationID = "createOrganization"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'p': // Prefix: "projects"
				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetProjects"
						r.operationID = "getProjects"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateProject"
						r.operationID = "createProject"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ref"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "functions"
							if l := len("functions"); len(elem) >= l && elem[0:l] == "functions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetFunctions"
									r.operationID = "getFunctions"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "CreateFunction"
									r.operationID = "createFunction"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "function_slug"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										// Leaf: DeleteFunction
										r.name = "DeleteFunction"
										r.operationID = "deleteFunction"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										// Leaf: GetFunction
										r.name = "GetFunction"
										r.operationID = "getFunction"
										r.args = args
										r.count = 2
										return r, true
									case "PATCH":
										// Leaf: UpdateFunction
										r.name = "UpdateFunction"
										r.operationID = "updateFunction"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
							}
						case 'p': // Prefix: "pgsodium"
							if l := len("pgsodium"); len(elem) >= l && elem[0:l] == "pgsodium" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetConfig
									r.name = "GetConfig"
									r.operationID = "getConfig"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									// Leaf: UpdateConfig
									r.name = "UpdateConfig"
									r.operationID = "updateConfig"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "secrets"
							if l := len("secrets"); len(elem) >= l && elem[0:l] == "secrets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: DeleteSecrets
									r.name = "DeleteSecrets"
									r.operationID = "deleteSecrets"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									// Leaf: GetSecrets
									r.name = "GetSecrets"
									r.operationID = "getSecrets"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									// Leaf: CreateSecrets
									r.name = "CreateSecrets"
									r.operationID = "createSecrets"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
