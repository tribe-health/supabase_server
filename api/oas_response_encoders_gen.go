// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeCreateFunctionResponse(response CreateFunctionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FunctionResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *CreateFunctionForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *CreateFunctionInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeCreateOrganizationResponse(response CreateOrganizationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrganizationResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *CreateOrganizationInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeCreateProjectResponse(response ProjectResponse, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	span.SetStatus(codes.Ok, http.StatusText(201))
	e := jx.GetEncoder()

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}
	return nil

}
func encodeCreateSecretsResponse(response CreateSecretsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateSecretsCreated:
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))
		return nil

	case *CreateSecretsForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *CreateSecretsInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeDeleteFunctionResponse(response DeleteFunctionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFunctionOK:
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		return nil

	case *DeleteFunctionForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *DeleteFunctionInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeDeleteSecretsResponse(response DeleteSecretsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteSecretsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *DeleteSecretsForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *DeleteSecretsInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeGetConfigResponse(response GetConfigRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetConfigOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *GetConfigForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *GetConfigInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeGetFunctionResponse(response GetFunctionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FunctionSlugResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *GetFunctionForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *GetFunctionInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeGetFunctionsResponse(response GetFunctionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetFunctionsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *GetFunctionsForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *GetFunctionsInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeGetOrganizationsResponse(response GetOrganizationsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetOrganizationsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *GetOrganizationsInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeGetProjectsResponse(response []ProjectResponse, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}
	return nil

}
func encodeGetSecretsResponse(response GetSecretsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetSecretsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *GetSecretsForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *GetSecretsInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeUpdateConfigResponse(response UpdateConfigRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UpdateConfigOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *UpdateConfigForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *UpdateConfigInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
func encodeUpdateFunctionResponse(response UpdateFunctionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FunctionResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}
		return nil

	case *UpdateFunctionForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))
		return nil

	case *UpdateFunctionInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))
		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
