// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"time"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
)

// Allocate option closure once.
var serverSpanKind = trace.WithSpanKind(trace.SpanKindServer)

// handleCreateFunctionRequest handles createFunction operation.
//
// POST /v1/projects/{ref}/functions
func (s *Server) handleCreateFunctionRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createFunction"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "CreateFunction",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "CreateFunction",
			ID:   "createFunction",
		}
	)
	sctx, err := s.securityApiKeyParam(ctx, "CreateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyHeader(ctx, "CreateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "CreateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeCreateFunctionParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeCreateFunctionRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response CreateFunctionRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "CreateFunction",
			OperationID:   "createFunction",
			Body:          request,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = CreateFunctionBody
			Params   = CreateFunctionParams
			Response = CreateFunctionRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackCreateFunctionParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.CreateFunction(ctx, request, params)
			},
		)
	} else {
		response, err = s.h.CreateFunction(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeCreateFunctionResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleCreateOrganizationRequest handles createOrganization operation.
//
// POST /v1/organizations
func (s *Server) handleCreateOrganizationRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createOrganization"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "CreateOrganization",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "CreateOrganization",
			ID:   "createOrganization",
		}
	)
	sctx, err := s.securityBearer(ctx, "CreateOrganization", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	request, close, err := s.decodeCreateOrganizationRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response CreateOrganizationRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "CreateOrganization",
			OperationID:   "createOrganization",
			Body:          request,
			Params:        map[string]any{},
			Raw:           r,
		}

		type (
			Request  = CreateOrganizationBody
			Params   = struct{}
			Response = CreateOrganizationRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.CreateOrganization(ctx, request)
			},
		)
	} else {
		response, err = s.h.CreateOrganization(ctx, request)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeCreateOrganizationResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleCreateProjectRequest handles createProject operation.
//
// POST /v1/projects
func (s *Server) handleCreateProjectRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createProject"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "CreateProject",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "CreateProject",
			ID:   "createProject",
		}
	)
	sctx, err := s.securityBearer(ctx, "CreateProject", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	request, close, err := s.decodeCreateProjectRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response ProjectResponse
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "CreateProject",
			OperationID:   "createProject",
			Body:          request,
			Params:        map[string]any{},
			Raw:           r,
		}

		type (
			Request  = CreateProjectBody
			Params   = struct{}
			Response = ProjectResponse
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.CreateProject(ctx, request)
			},
		)
	} else {
		response, err = s.h.CreateProject(ctx, request)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeCreateProjectResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleCreateSecretsRequest handles createSecrets operation.
//
// POST /v1/projects/{ref}/secrets
func (s *Server) handleCreateSecretsRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createSecrets"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "CreateSecrets",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "CreateSecrets",
			ID:   "createSecrets",
		}
	)
	sctx, err := s.securityApiKeyParam(ctx, "CreateSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyHeader(ctx, "CreateSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "CreateSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeCreateSecretsParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeCreateSecretsRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response CreateSecretsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "CreateSecrets",
			OperationID:   "createSecrets",
			Body:          request,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = []CreateSecretBody
			Params   = CreateSecretsParams
			Response = CreateSecretsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackCreateSecretsParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.CreateSecrets(ctx, request, params)
			},
		)
	} else {
		response, err = s.h.CreateSecrets(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeCreateSecretsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleDeleteFunctionRequest handles deleteFunction operation.
//
// DELETE /v1/projects/{ref}/functions/{function_slug}
func (s *Server) handleDeleteFunctionRequest(args [2]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteFunction"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "DeleteFunction",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "DeleteFunction",
			ID:   "deleteFunction",
		}
	)
	sctx, err := s.securityApiKeyHeader(ctx, "DeleteFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyParam(ctx, "DeleteFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "DeleteFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeDeleteFunctionParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response DeleteFunctionRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "DeleteFunction",
			OperationID:   "deleteFunction",
			Body:          nil,
			Params: map[string]any{
				"ref":           params.Ref,
				"function_slug": params.FunctionSlug,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = DeleteFunctionParams
			Response = DeleteFunctionRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDeleteFunctionParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.DeleteFunction(ctx, params)
			},
		)
	} else {
		response, err = s.h.DeleteFunction(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDeleteFunctionResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleDeleteSecretsRequest handles deleteSecrets operation.
//
// DELETE /v1/projects/{ref}/secrets
func (s *Server) handleDeleteSecretsRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteSecrets"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "DeleteSecrets",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "DeleteSecrets",
			ID:   "deleteSecrets",
		}
	)
	sctx, err := s.securityApiKeyHeader(ctx, "DeleteSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyParam(ctx, "DeleteSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "DeleteSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeDeleteSecretsParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeDeleteSecretsRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response DeleteSecretsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "DeleteSecrets",
			OperationID:   "deleteSecrets",
			Body:          request,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = []string
			Params   = DeleteSecretsParams
			Response = DeleteSecretsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDeleteSecretsParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.DeleteSecrets(ctx, request, params)
			},
		)
	} else {
		response, err = s.h.DeleteSecrets(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDeleteSecretsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetConfigRequest handles getConfig operation.
//
// GET /v1/projects/{ref}/pgsodium
func (s *Server) handleGetConfigRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getConfig"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetConfig",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetConfig",
			ID:   "getConfig",
		}
	)
	sctx, err := s.securityBearer(ctx, "GetConfig", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeGetConfigParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetConfigRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetConfig",
			OperationID:   "getConfig",
			Body:          nil,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetConfigParams
			Response = GetConfigRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetConfigParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetConfig(ctx, params)
			},
		)
	} else {
		response, err = s.h.GetConfig(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetConfigResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetFunctionRequest handles getFunction operation.
//
// GET /v1/projects/{ref}/functions/{function_slug}
func (s *Server) handleGetFunctionRequest(args [2]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getFunction"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetFunction",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetFunction",
			ID:   "getFunction",
		}
	)
	sctx, err := s.securityApiKeyHeader(ctx, "GetFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyParam(ctx, "GetFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "GetFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeGetFunctionParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetFunctionRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetFunction",
			OperationID:   "getFunction",
			Body:          nil,
			Params: map[string]any{
				"include_body":  params.IncludeBody,
				"ref":           params.Ref,
				"function_slug": params.FunctionSlug,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetFunctionParams
			Response = GetFunctionRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetFunctionParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetFunction(ctx, params)
			},
		)
	} else {
		response, err = s.h.GetFunction(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetFunctionResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetFunctionsRequest handles getFunctions operation.
//
// GET /v1/projects/{ref}/functions
func (s *Server) handleGetFunctionsRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getFunctions"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetFunctions",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetFunctions",
			ID:   "getFunctions",
		}
	)
	sctx, err := s.securityApiKeyParam(ctx, "GetFunctions", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyHeader(ctx, "GetFunctions", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "GetFunctions", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeGetFunctionsParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetFunctionsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetFunctions",
			OperationID:   "getFunctions",
			Body:          nil,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetFunctionsParams
			Response = GetFunctionsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetFunctionsParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetFunctions(ctx, params)
			},
		)
	} else {
		response, err = s.h.GetFunctions(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetFunctionsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetOrganizationsRequest handles getOrganizations operation.
//
// GET /v1/organizations
func (s *Server) handleGetOrganizationsRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getOrganizations"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetOrganizations",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetOrganizations",
			ID:   "getOrganizations",
		}
	)
	sctx, err := s.securityBearer(ctx, "GetOrganizations", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response GetOrganizationsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetOrganizations",
			OperationID:   "getOrganizations",
			Body:          nil,
			Params:        map[string]any{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = GetOrganizationsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetOrganizations(ctx)
			},
		)
	} else {
		response, err = s.h.GetOrganizations(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetOrganizationsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetProjectsRequest handles getProjects operation.
//
// GET /v1/projects
func (s *Server) handleGetProjectsRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getProjects"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetProjects",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetProjects",
			ID:   "getProjects",
		}
	)
	sctx, err := s.securityBearer(ctx, "GetProjects", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response []ProjectResponse
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetProjects",
			OperationID:   "getProjects",
			Body:          nil,
			Params:        map[string]any{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = []ProjectResponse
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetProjects(ctx)
			},
		)
	} else {
		response, err = s.h.GetProjects(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetProjectsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleGetSecretsRequest handles getSecrets operation.
//
// GET /v1/projects/{ref}/secrets
func (s *Server) handleGetSecretsRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getSecrets"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "GetSecrets",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetSecrets",
			ID:   "getSecrets",
		}
	)
	sctx, err := s.securityApiKeyHeader(ctx, "GetSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyParam(ctx, "GetSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "GetSecrets", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeGetSecretsParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetSecretsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "GetSecrets",
			OperationID:   "getSecrets",
			Body:          nil,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetSecretsParams
			Response = GetSecretsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetSecretsParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.GetSecrets(ctx, params)
			},
		)
	} else {
		response, err = s.h.GetSecrets(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetSecretsResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleUpdateConfigRequest handles updateConfig operation.
//
// PUT /v1/projects/{ref}/pgsodium
func (s *Server) handleUpdateConfigRequest(args [1]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("updateConfig"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "UpdateConfig",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "UpdateConfig",
			ID:   "updateConfig",
		}
	)
	sctx, err := s.securityBearer(ctx, "UpdateConfig", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeUpdateConfigParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeUpdateConfigRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpdateConfigRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "UpdateConfig",
			OperationID:   "updateConfig",
			Body:          request,
			Params: map[string]any{
				"ref": params.Ref,
			},
			Raw: r,
		}

		type (
			Request  = UpdatePgsodiumConfigBody
			Params   = UpdateConfigParams
			Response = UpdateConfigRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackUpdateConfigParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.UpdateConfig(ctx, request, params)
			},
		)
	} else {
		response, err = s.h.UpdateConfig(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpdateConfigResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleUpdateFunctionRequest handles updateFunction operation.
//
// PATCH /v1/projects/{ref}/functions/{function_slug}
func (s *Server) handleUpdateFunctionRequest(args [2]string, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("updateFunction"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "UpdateFunction",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "UpdateFunction",
			ID:   "updateFunction",
		}
	)
	sctx, err := s.securityApiKeyHeader(ctx, "UpdateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyHeader",
			Err:              err,
		}
		recordError("Security:ApiKeyHeader", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityApiKeyParam(ctx, "UpdateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "ApiKeyParam",
			Err:              err,
		}
		recordError("Security:ApiKeyParam", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	sctx, err = s.securityBearer(ctx, "UpdateFunction", r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "Bearer",
			Err:              err,
		}
		recordError("Security:Bearer", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeUpdateFunctionParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeUpdateFunctionRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpdateFunctionRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "UpdateFunction",
			OperationID:   "updateFunction",
			Body:          request,
			Params: map[string]any{
				"ref":           params.Ref,
				"function_slug": params.FunctionSlug,
			},
			Raw: r,
		}

		type (
			Request  = UpdateFunctionBody
			Params   = UpdateFunctionParams
			Response = UpdateFunctionRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackUpdateFunctionParams,
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.UpdateFunction(ctx, request, params)
			},
		)
	} else {
		response, err = s.h.UpdateFunction(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpdateFunctionResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}
