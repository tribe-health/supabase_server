// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateFunction implements createFunction operation.
	//
	// Creates a function and adds it to the specified project.
	//
	// POST /v1/projects/{ref}/functions
	CreateFunction(ctx context.Context, req CreateFunctionBody, params CreateFunctionParams) (CreateFunctionRes, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Create an organization.
	//
	// POST /v1/organizations
	CreateOrganization(ctx context.Context, req CreateOrganizationBody) (CreateOrganizationRes, error)
	// CreateProject implements createProject operation.
	//
	// Create a project.
	//
	// POST /v1/projects
	CreateProject(ctx context.Context, req CreateProjectBody) (ProjectResponse, error)
	// CreateSecrets implements createSecrets operation.
	//
	// Creates multiple secrets and adds them to the specified project.
	//
	// POST /v1/projects/{ref}/secrets
	CreateSecrets(ctx context.Context, req []CreateSecretBody, params CreateSecretsParams) (CreateSecretsRes, error)
	// DeleteFunction implements deleteFunction operation.
	//
	// Deletes a function with the specified slug from the specified project.
	//
	// DELETE /v1/projects/{ref}/functions/{function_slug}
	DeleteFunction(ctx context.Context, params DeleteFunctionParams) (DeleteFunctionRes, error)
	// DeleteSecrets implements deleteSecrets operation.
	//
	// Deletes all secrets with the given names from the specified project.
	//
	// DELETE /v1/projects/{ref}/secrets
	DeleteSecrets(ctx context.Context, req []string, params DeleteSecretsParams) (DeleteSecretsRes, error)
	// GetConfig implements getConfig operation.
	//
	// Gets project's pgsodium config.
	//
	// GET /v1/projects/{ref}/pgsodium
	GetConfig(ctx context.Context, params GetConfigParams) (GetConfigRes, error)
	// GetFunction implements getFunction operation.
	//
	// Retrieves a function with the specified slug and project.
	//
	// GET /v1/projects/{ref}/functions/{function_slug}
	GetFunction(ctx context.Context, params GetFunctionParams) (GetFunctionRes, error)
	// GetFunctions implements getFunctions operation.
	//
	// Returns all functions you've previously added to the specified project.
	//
	// GET /v1/projects/{ref}/functions
	GetFunctions(ctx context.Context, params GetFunctionsParams) (GetFunctionsRes, error)
	// GetOrganizations implements getOrganizations operation.
	//
	// Returns a list of organizations that you currently belong to.
	//
	// GET /v1/organizations
	GetOrganizations(ctx context.Context) (GetOrganizationsRes, error)
	// GetProjects implements getProjects operation.
	//
	// Returns a list of all projects you've previously created.
	//
	// GET /v1/projects
	GetProjects(ctx context.Context) ([]ProjectResponse, error)
	// GetSecrets implements getSecrets operation.
	//
	// Returns all secrets you've previously added to the specified project.
	//
	// GET /v1/projects/{ref}/secrets
	GetSecrets(ctx context.Context, params GetSecretsParams) (GetSecretsRes, error)
	// UpdateConfig implements updateConfig operation.
	//
	// Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the
	// older key to become inaccessible.
	//
	// PUT /v1/projects/{ref}/pgsodium
	UpdateConfig(ctx context.Context, req UpdatePgsodiumConfigBody, params UpdateConfigParams) (UpdateConfigRes, error)
	// UpdateFunction implements updateFunction operation.
	//
	// Updates a function with the specified slug and project.
	//
	// PATCH /v1/projects/{ref}/functions/{function_slug}
	UpdateFunction(ctx context.Context, req UpdateFunctionBody, params UpdateFunctionParams) (UpdateFunctionRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		sec: sec,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
