// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"supabase_server/ent/predicate"
	"supabase_server/ent/project"
	"time"

	"github.com/google/uuid"
)

// ProjectWhereInput represents a where input for filtering Project queries.
type ProjectWhereInput struct {
	Predicates []predicate.Project  `json:"-"`
	Not        *ProjectWhereInput   `json:"not,omitempty"`
	Or         []*ProjectWhereInput `json:"or,omitempty"`
	And        []*ProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "organization_id" field predicates.
	OrganizationID      *uuid.UUID  `json:"organizationID,omitempty"`
	OrganizationIDNEQ   *uuid.UUID  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn    []uuid.UUID `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn []uuid.UUID `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT    *uuid.UUID  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE   *uuid.UUID  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT    *uuid.UUID  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE   *uuid.UUID  `json:"organizationIDLTE,omitempty"`

	// "region" field predicates.
	Region             *string  `json:"region,omitempty"`
	RegionNEQ          *string  `json:"regionNEQ,omitempty"`
	RegionIn           []string `json:"regionIn,omitempty"`
	RegionNotIn        []string `json:"regionNotIn,omitempty"`
	RegionGT           *string  `json:"regionGT,omitempty"`
	RegionGTE          *string  `json:"regionGTE,omitempty"`
	RegionLT           *string  `json:"regionLT,omitempty"`
	RegionLTE          *string  `json:"regionLTE,omitempty"`
	RegionContains     *string  `json:"regionContains,omitempty"`
	RegionHasPrefix    *string  `json:"regionHasPrefix,omitempty"`
	RegionHasSuffix    *string  `json:"regionHasSuffix,omitempty"`
	RegionEqualFold    *string  `json:"regionEqualFold,omitempty"`
	RegionContainsFold *string  `json:"regionContainsFold,omitempty"`

	// "kps_enabled" field predicates.
	KpsEnabled    *bool `json:"kpsEnabled,omitempty"`
	KpsEnabledNEQ *bool `json:"kpsEnabledNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProjectWhereInput) AddPredicates(predicates ...predicate.Project) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProjectWhereInput filter on the ProjectQuery builder.
func (i *ProjectWhereInput) Filter(q *ProjectQuery) (*ProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProjectWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProjectWhereInput is returned in case the ProjectWhereInput is empty.
var ErrEmptyProjectWhereInput = errors.New("ent: empty predicate ProjectWhereInput")

// P returns a predicate for filtering projects.
// An error is returned if the input is empty or invalid.
func (i *ProjectWhereInput) P() (predicate.Project, error) {
	var predicates []predicate.Project
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, project.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Project, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, project.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Project, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, project.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, project.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, project.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, project.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, project.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, project.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, project.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, project.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, project.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, project.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, project.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, project.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, project.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, project.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, project.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, project.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, project.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, project.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, project.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, project.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, project.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, project.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, project.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, project.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, project.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, project.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, project.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, project.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, project.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, project.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, project.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, project.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, project.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, project.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, project.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, project.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, project.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, project.NameContainsFold(*i.NameContainsFold))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, project.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, project.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, project.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, project.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, project.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, project.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, project.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, project.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.Region != nil {
		predicates = append(predicates, project.RegionEQ(*i.Region))
	}
	if i.RegionNEQ != nil {
		predicates = append(predicates, project.RegionNEQ(*i.RegionNEQ))
	}
	if len(i.RegionIn) > 0 {
		predicates = append(predicates, project.RegionIn(i.RegionIn...))
	}
	if len(i.RegionNotIn) > 0 {
		predicates = append(predicates, project.RegionNotIn(i.RegionNotIn...))
	}
	if i.RegionGT != nil {
		predicates = append(predicates, project.RegionGT(*i.RegionGT))
	}
	if i.RegionGTE != nil {
		predicates = append(predicates, project.RegionGTE(*i.RegionGTE))
	}
	if i.RegionLT != nil {
		predicates = append(predicates, project.RegionLT(*i.RegionLT))
	}
	if i.RegionLTE != nil {
		predicates = append(predicates, project.RegionLTE(*i.RegionLTE))
	}
	if i.RegionContains != nil {
		predicates = append(predicates, project.RegionContains(*i.RegionContains))
	}
	if i.RegionHasPrefix != nil {
		predicates = append(predicates, project.RegionHasPrefix(*i.RegionHasPrefix))
	}
	if i.RegionHasSuffix != nil {
		predicates = append(predicates, project.RegionHasSuffix(*i.RegionHasSuffix))
	}
	if i.RegionEqualFold != nil {
		predicates = append(predicates, project.RegionEqualFold(*i.RegionEqualFold))
	}
	if i.RegionContainsFold != nil {
		predicates = append(predicates, project.RegionContainsFold(*i.RegionContainsFold))
	}
	if i.KpsEnabled != nil {
		predicates = append(predicates, project.KpsEnabledEQ(*i.KpsEnabled))
	}
	if i.KpsEnabledNEQ != nil {
		predicates = append(predicates, project.KpsEnabledNEQ(*i.KpsEnabledNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProjectWhereInput
	case 1:
		return predicates[0], nil
	default:
		return project.And(predicates...), nil
	}
}
