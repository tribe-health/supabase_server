// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
)

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Name           string
	OrganizationID uuid.UUID
	Region         string
	KpsEnabled     bool
}

// Mutate applies the CreateProjectInput on the ProjectMutation builder.
func (i *CreateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetOrganizationID(i.OrganizationID)
	m.SetRegion(i.Region)
	m.SetKpsEnabled(i.KpsEnabled)
}

// SetInput applies the change-set in the CreateProjectInput on the ProjectCreate builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	UpdatedAt      *time.Time
	Name           *string
	OrganizationID *uuid.UUID
	Region         *string
	KpsEnabled     *bool
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.Region; v != nil {
		m.SetRegion(*v)
	}
	if v := i.KpsEnabled; v != nil {
		m.SetKpsEnabled(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
